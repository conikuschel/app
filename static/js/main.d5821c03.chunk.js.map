{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","useState","currentMessage","setCurrentMessage","messageList","setMessageList","truckList","setTruckList","markers","setMarkers","map","setMap","emit","sendMessage","a","messageData","message","name","Arreglar","codigo","datito","code","useEffect","on","data","length","clonedArray","JSON","parse","stringify","i","position","clonedMarkers","L","window","marker","addTo","list","num","forEach","element","states","par_od","arrow","polyline","origin","destination","polylineDecorator","patterns","offset","repeat","symbol","Symbol","arrowHead","pixelSize","pathOptions","fillOpacity","weight","panTo","LatLng","MapContainer","center","zoom","whenCreated","TileLayer","url","attribution","className","messageContent","id","date","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","class","card","index","Card","style","width","Body","Title","Text","Button","variant","io","path","err","console","log","App","setUsername","showChat","setShowChat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5821c03.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport { TileLayer, Marker, Popup, MapContainer } from 'react-leaflet';\r\nimport  \"leaflet-polylinedecorator\"\r\nimport $ from 'jquery';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction Chat({ socket, username}) {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n  const [truckList, setTruckList] = useState([]);\r\n  const [markers, setMarkers] = useState({});\r\n  const [map, setMap] = useState(null);\r\n  if (truckList === []){\r\n    socket.emit(\"TRUCKS\");\r\n  }\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        message: currentMessage,\r\n        name: username\r\n      };\r\n\r\n      await socket.emit(\"CHAT\", messageData);\r\n    }\r\n  };\r\n\r\n  const renderCard = (card, index) => {\r\n    return (\r\n      <Card style={{ width: \"18rem\" }} key={index} className=\"box\">\r\n        <Card.Body>\r\n          <Card.Title>Cami√≥n {card.code}</Card.Title>\r\n          <Card.Text>Origen: {card.origin}</Card.Text>\r\n          <Card.Text>Destino: {card.destination}</Card.Text>\r\n          <Card.Text>Estado: {card?.states}</Card.Text>\r\n          {card?.states !== \"Ok\" && <Button onClick={Arreglar(card?.code)} variant=\"primary\">Arreglar</Button>}\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  function Arreglar(codigo){\r\n    const datito = {\r\n      code: codigo\r\n    };\r\n    socket.emit(\"FIX\", datito);\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on(\"POSITION\", (data) => {\r\n      if (truckList.length){\r\n        let clonedArray = JSON.parse(JSON.stringify(truckList));\r\n        for (var i=0; i<=truckList.length; i++) {\r\n          if (clonedArray[i]?.code === data.code){\r\n            clonedArray[i].position = data.position;\r\n            if (markers.length){\r\n              let clonedMarkers = JSON.parse(JSON.stringify(markers));\r\n            }\r\n            let clonedMarkers = {};\r\n            var L = window.L;\r\n            clonedMarkers[data.code] = L.marker(data.position).addTo(map);\r\n            setMarkers(clonedMarkers);\r\n            setTruckList(clonedArray);\r\n          }\r\n        }  \r\n      }  \r\n    });\r\n  }, [truckList, markers]);\r\n\r\n  /* useEffect(() => {\r\n    socket.on(\"FIX\", (data) => {\r\n      if (truckList.length){\r\n        let clonedArray = JSON.parse(JSON.stringify(truckList));\r\n        for (var i=0; i<=truckList.length; i++) {\r\n          if (clonedArray[i]?.code === data.code){\r\n            clonedArray[i].states = \"Ok\";\r\n            setTruckList(clonedArray);\r\n          }\r\n        }  \r\n      }  \r\n    });\r\n  }, [truckList]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"FAILURE\", (data) => {\r\n      if (truckList.length){\r\n        let clonedArray = JSON.parse(JSON.stringify(truckList));\r\n        for (var i=0; i<=truckList.length; i++) {\r\n          if (clonedArray[i]?.code === data.code){\r\n            clonedArray[i].states = data.source;\r\n            setTruckList(clonedArray);\r\n          }\r\n        }  \r\n      }\r\n    });\r\n  }, [truckList]); */\r\n\r\n  useEffect(() => {\r\n    socket.on(\"CHAT\", (data) => {\r\n      setMessageList((list) => [...list, data]);\r\n    });\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"TRUCKS\", (data) => {\r\n      var L = window.L;\r\n      var num = 1;\r\n      data.forEach(function (element) {\r\n        element.states = \"Ok\";\r\n      });\r\n      setTruckList(data);\r\n      truckList.forEach(function(par_od)  {\r\n        var arrow = L.polyline([\r\n          par_od.origin,\r\n          par_od.destination\r\n        ], {}).addTo(map);\r\n        L.polylineDecorator(arrow, {\r\n          patterns: [\r\n            {offset: '10%', repeat: '30%',  symbol: L.Symbol.arrowHead({pixelSize: 15, pathOptions: {fillOpacity: 1, weight: 0}})}\r\n          ]\r\n        }).addTo(map); \r\n        if (num === 1){\r\n          map.panTo(new L.LatLng(par_od.origin[0],par_od.origin[1]));\r\n          num = 2;\r\n        }\r\n      });\r\n    });\r\n  }, [truckList]);\r\n\r\n  return (\r\n    <>\r\n      <MapContainer center={[-33.27, -70.4]} zoom={10} whenCreated={setMap}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n      </MapContainer>\r\n      <div className=\"chat-window\">\r\n        <div className=\"chat-header\">\r\n          <p>Live Chat</p>\r\n        </div>\r\n        <div className=\"chat-body\">\r\n          <ScrollToBottom className=\"message-container\">\r\n            {messageList.map((messageContent) => {\r\n              return (\r\n                <div\r\n                  className=\"message\"\r\n                  id={username === messageContent.name ? \"you\" : \"other\"}\r\n                >\r\n                  <div>\r\n                    <div className=\"message-content\">\r\n                      <p>{messageContent.message}</p>\r\n                    </div>\r\n                    <div className=\"message-meta\">\r\n                      <p id=\"date\">{messageContent.date}</p>\r\n                      <p id=\"name\">{messageContent.name}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </ScrollToBottom>\r\n        </div>\r\n        <div className=\"chat-footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={currentMessage}\r\n            placeholder=\"Hey...\"\r\n            onChange={(event) => {\r\n              setCurrentMessage(event.target.value);\r\n            }}\r\n            onKeyPress={(event) => {\r\n              event.key === \"Enter\" && sendMessage();\r\n            }}\r\n          />\r\n          <button onClick={sendMessage}>&#9658;</button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-group\" id=\"cardis\">\r\n        {truckList.map(renderCard)}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import \"./App.css\";\r\nimport io from \"socket.io-client\";\r\nimport { useState } from \"react\";\r\nimport Chat from \"./Chat\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst socket = io(\"https://tarea-3-websocket.2021-2.tallerdeintegracion.cl\", {\r\n  path: \"/trucks/\"});\r\n\r\nsocket.on(\"connect_error\", (err) => {\r\n  console.log(`connect_error due to ${err.message}`);\r\n});\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [showChat, setShowChat] = useState(false);\r\n  socket.emit(\"TRUCKS\");\r\n\r\n  const joinRoom = () => {\r\n    if (username !== \"\") {\r\n      setShowChat(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!showChat ? (\r\n        <div className=\"joinChatContainer\">\r\n          <h3>Join A Chat</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"John...\"\r\n            onChange={(event) => {\r\n              setUsername(event.target.value);\r\n            }}\r\n          />\r\n          <button onClick={joinRoom}>Join</button>\r\n        </div>\r\n      ) : (\r\n        <Chat socket={socket} username={username}/>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}